BASIC  :
###################

Q1. What is Apache Kafka?
--------------------------
-> Apache Kafka is a tool.
-> It acts as mediator between services to exchange messages (Message Broker) where Publisher will publish the message and subscriber will consume the message.
-> Kafka is very useful for real time data exchange.

Q2. Why do we use Kafka?
--------------------------
üëâ We use Kafka to move data quickly from one system to another (real-time data pipelines) and to process data immediately when it comes (real-time streaming).
e.g., ‚Äúlike YouTube live chat messages"

Q3.Advantages and Disadvantage of kafka ?
-------------------------------------------
Advantages of Kafka :
- Scalability ‚Äì Can easily handle very large amounts of data by adding more servers.
- Fault Tolerance ‚Äì Data is replicated (copied) across servers, so even if one fails, data is safe.
- High Throughput ‚Äì Can process millions of messages per second with very low delay.
- Durability ‚Äì Stores data reliably on disk, so messages are not lost.
- Real-Time Processing ‚Äì Best for real-time streaming (like live chats, stock prices, logs).
Disadvantages of Kafka :
- Complex Setup ‚Äì Harder to install, configure, and maintain compared to simple queues.
- High Learning Curve ‚Äì Developers need to spend time learning concepts (brokers, topics, partitions).
- Not Ideal for Small Data ‚Äì Overkill if you only need to process small or simple workloads.
- Resource Usage ‚Äì Needs good CPU, memory, and storage for large-scale usage.
- Limited Message Prioritization ‚Äì All messages in a topic are treated equally; no built-in priority handling.


Q4. Explain Kafka Architecture / Key Component of Kafka ?
----------------------------------------------------------
            a. Zookeeper/Kraft
            b. Kafka Server / Kafka Brokers 
            c. Kafka Topic
            d. Partitions
            e. Publisher/producer
            f. Subscriber/consumer

Q5. What is Zookeeper in Kafka?
--------------------------------
Zookeeper (old way)
üëâ It is an external tool that manages the Kafka cluster. It keeps track of which brokers are alive, who is the leader of a partition, and stores cluster metadata.

Q6. What is KRaft in Kafka?
-----------------------------
KRaft (new way)
üëâ It is Kafka‚Äôs own built-in system (no need for Zookeeper). It directly manages brokers, topics, partitions, and leaders inside Kafka itself, making Kafka simpler and faster.


Q7. What is a Kafka Server / Kafka Brokers  ?
-----------------------------------------------
Kafka Server / Kafka Brokers
üëâ A broker is just a Kafka server (machine running Kafka).
üëâ It stores the messages (data) and sends them to consumers when asked.
üëâ One broker alone can work, but usually we use many brokers together (this group is called a Kafka cluster) to share the load and keep data safe.


Q8. What is Kafka Topic ?
----------------------------
üëâ A category/channel where messages are stored.
Example: Topic orders will have all order-related messages.
Diagram :
+-----------------------+
|      Kafka Broker     |
|                       |
|   +-------------+     |
|   |   TopicA    |     |
|   +-------------+     |
|                       |
|   +-------------+     |
|   |   TopicB    |     |
|   +-------------+     |
+-----------------------+


Q9. What is Partitions ?
-----------------------------
A partitions is a sub-section of a Kafka topic,each partition maintains a sequential order of messages, allowing prallel read and write for higher performance.
Diagram :
+-----------------------+
|      Kafka Broker     |
|                       |
|   +-------------+     |
|   |   TopicA    |     |
|   |-------------|     |
|   | Partition 0 |     |
|   | Partition 1 |     |
|   +-------------+     |
|                       |
|   +-------------+     |
|   |   TopicB    |     |
|   |-------------|     |
|   | Partition 0 |     |
|   | Partition 1 |     |
|   +-------------+     |
+-----------------------+

Q10. What is Publisher/producer ?
-----------------------------------
üëâ The application that sends data (messages) to Kafka topics.
Example: E-commerce app sends new order details to Kafka.

Q11. What is Subscriber/consumer ?
------------------------------------
üëâ The application that reads data from Kafka topics.
Example: Billing system consumes order messages to generate invoices.
Diagram :
                        +-----------------------+     
                        |      Kafka Broker     |
                        |                       |
                        |   +-------------+     |
                        |   |   TopicA    |     |
                        |   |-------------|     |
             Producer ‚Üí |   | Partition 0 |     |  ‚Üê  Consumer
                        |   | Partition 1 |     |
                        |   +-------------+     |
                        |                       |
                        |   +-------------+     |
                        |   |   TopicB    |     |
                        |   |-------------|     |
                        |   | Partition 0 |     |
                        |   | Partition 1 |     |
                        |   +-------------+     |
                        +-----------------------+

Q12. What is a Consumer Group?
--------------------------------
üëâ A group of consumers that share work of reading from a topic. Each partition is consumed by only one consumer in the group.
Daigram :
                 +-----------------------+
                 |      Kafka Broker     |
                 |                       |
                 |   +-------------+     |
                 |   |   TopicA    |     |
                 |   |-------------|     |
                 |   | Partition 0 |-----|----> Consumer 1
                 |   | Partition 1 |-----|----> Consumer 2
                 |   | Partition 2 |-----|----> Consumer 3
                 |   | Partition 3 |-----|----> Consumer 4
                 |   +-------------+     |
                 +-----------------------+
                        Consumer Group (Group ID = "Order-Service")


Q13. What is a Kafka Cluster?
------------------------------
-> A Kafka cluster is a group of Kafka brokers working together to manage message storage, distribution, and replication for high-throughput, fault-tolerant messaging.
Diagram :

          +===================================================================+
          |                         Kafka Cluster                             |
          |                                                                   |
          |   +------------------------+     +-----------------------------+  |
          |   |       Broker 1         |     |          Broker 2           |  |
          |   |------------------------|     |-----------------------------|  |
          |   |  TopicA                |     |  TopicA                     |  |
          |   |  +---------------+     |     |  +---------------+          |  |
Producer ‚Üí|   |  | Partition 0   |     |     |  | Partition 0   |          |  |‚Üê Consumer
          |   |  +---------------+     |     |  +---------------+          |  |
          |   |  | Partition 1   |     |     |  | Partition 1   |          |  |
          |   |  +---------------+     |     |  +---------------+          |  |
          |   |                        |     |                             |  |
          |   |  TopicB                |     |  TopicB                     |  |
          |   |  +---------------+     |     |  +---------------+          |  |
          |   |  | Partition 0   |     |     |  | Partition 0   |          |  |
          |   |  +---------------+     |     |  +---------------+          |  |
          |   +------------------------+     +-----------------------------+  |
          |                                                                   |
          +===================================================================+

eg-1 :
‚úÖ Kafka Cluster with 1 Broker, 1 Topic (3 Partitions), Replication Factor 1 (so no replicas ‚Äî each partition exists only once).
          +====================================================+
          |                  Kafka Cluster                     |
          |                                                    |
          |   +--------------------------------------------+   |
          |   |                Broker 1                    |   |
          |   |--------------------------------------------|   |
          |   |  TopicA                                    |   |
          |   |  +------------------+                      |   |
          |   |  | Partition 0      |  (Leader)            |   |
          |   |  +------------------+                      |   |
          |   |  | Partition 1      |  (Leader)            |   |
          |   |  +------------------+                      |   |
          |   |  | Partition 2      |  (Leader)            |   |
          |   |  +------------------+                      |   |
          |   +--------------------------------------------+   |
          |                                                    |
          +====================================================+

eg-2 :
‚úÖ Kafka Cluster with 2 Broker, 1 Topic (2 Partitions), Replication Factor 2.

            +===================================================================+
            |                           Kafka Cluster                           |
            |                                                                   |
            |   +------------------------+     +------------------------+       |
            |   |        Broker‚ÄØ1        |     |        Broker‚ÄØ2        |       |
            |   |------------------------|     |------------------------|       |
            |   |  TopicA                |     |  TopicA                |       |
            |   |  +------------------+  |     |  +------------------+  |       |
            |   |  | Partition‚ÄØ0      |  |     |  | Partition‚ÄØ0      |  |       |
            |   |  |  (Leader)        |  |     |  |  (Replica)       |  |       |
            |   |  +------------------+  |     |  +------------------+  |       |
            |   |  | Partition‚ÄØ1      |  |     |  | Partition‚ÄØ1      |  |       |
            |   |  |  (Replica)       |  |     |  |  (Leader)        |  |       |
            |   |  +------------------+  |     |  +------------------+  |       |
            |   +------------------------+     +------------------------+       |
            |                                                                   |
            +===================================================================+


Q14. What is a Kafka Producer Acknowledgment (acks)?
--------------------------------------------------------
üëâ A setting to control durability:
- acks=0 ‚Üí fire and forget.
- acks=1 ‚Üí leader must ack.
- acks=all ‚Üí leader + replicas must ack (safest).


Q15. What is Kafka Replication?
---------------------------------
üëâ Each partition can be replicated across brokers for fault tolerance. One replica is leader, others are followers.


Q16. What is an Offset in Kafka?
----------------------------------
üëâ A unique number (like an index) for each message in a partition. Consumers use it to track where they left off.
Diagram :
              Topic: orders
              Partition: 0

+---------+---------+---------+---------+---------+---------+
| Offset: |    0    |    1    |    2    |    3    |    4    |
+---------+---------+---------+---------+---------+---------+
| Message | "A"     | "B"     | "C"     | "D"     | "E"     |
+---------+---------+---------+---------+---------+---------+
                                        ‚Üë
                                  Consumer is here
                              (Current offset = 3)


Q17. What is message key ?
-------------------------------
-> used for partitioning : kafka uses the message key to decide which partition the message should go to.
-> ensure ordering :  message with the same key always go to the same partition.
-> optional : producer can send message with or without a key (if no key, kafka distributes messages in round-robin).
-> stored with message : the key is stored along with the message in kafka but doesn't effect the message content.
-> can be any data type: typically a string, but can be any serializable data.
Diagram :

                                  +----------------------------+
                                  |           TopicA           |
                                  |                            |
                      |-- KeyA -->|  +----------------------+  |
                      |           |  |    Partition 0       |  |
+-------------+       |           |  +----------------------+  |
|   Producer  | ------‚Üí           |                            |
+-------------+       |           |  +----------------------+  |
                      |-- KeyB -->|  |    Partition 1       |  |
                                  |  +----------------------+  |
                                  +----------------------------+



Q18. What is Kafka Serialization?
-----------------------------------
üëâ Serialization in Kafka means converting objects/data into a byte array before sending it to Kafka (Producer ‚Üí Broker).
- Kafka works with bytes only.
- So if you send a String, Integer, or even a Java object, it must first be serialized into bytes.
- Example:
   a. A StringSerializer converts "Hello" ‚Üí [72, 101, 108, 108, 111] (bytes).
   b. An IntegerSerializer converts 100 ‚Üí [0,0,0,100].

Q19. What is Kafka Deserialization?
---------------------------------------
üëâ Deserialization in Kafka means converting byte array back into an object when a Consumer reads data from Kafka.
Example:
     a. If Consumer uses StringDeserializer, it converts [72, 101, 108, 108, 111] ‚Üí "Hello".
     b. If Consumer uses IntegerDeserializer, it converts [0,0,0,100] ‚Üí 100.


Q20. Real-time use cases of Kafka?
-----------------------------------
üëâ Logging, monitoring, payment processing, fraud detection, real-time analytics, event-driven microservices.

Q21. What happens if a consumer goes down?
-------------------------------------------
üëâ Another consumer in the group will take over its partitions (rebalance).

Q22. What happens if a broker goes down?
------------------------------------------
üëâ Partition leader shifts to another replica (if replication is enabled).

Q23. What is Kafka Retention Policy?
--------------------------------------
üëâ How long Kafka keeps messages (based on time or size). Even if consumed, messages are retained.

Q24. What is Kafka Connect?
----------------------------
üëâ A tool for integrating Kafka with external systems (databases, Elasticsearch, etc.).


Q25. How do you monitor Kafka?
--------------------------------
üëâ Using Prometheus, Grafana, Confluent Control Center, Kafka Manager, or Spring Boot Actuator + Micrometer.

Q26. How do you integrate Kafka with Spring Boot?
--------------------------------------------------
üëâ Using spring-kafka dependency, with @KafkaListener for consumers and KafkaTemplate for producer.


Q27. What is Kafka UI ?
---------------------------
web-based open source tool that provides an easy way to use interface for monitoring,managing and interacting with apache clusters,
including topics, partitions,consumer groups and messages.





(10) Steps to setup kafka in windows:

Step-1 : Download Zookeeper:

   URL : https://dlcdn.apache.org/zookeeper/zookeeper-3.9.2/apache-zookeeper-3.9.2-bin.tar.gz
   URL : https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz

Step-2 : Download Apache Kafka:

	URL : https://downloads.apache.org/kafka/3.8.0/kafka_2.12-3.8.0.tgz

Step-3 : Set Path of ZOOKEEPER in Environment variables upto bin folder.

Step 4: Copy "zookeeper.properties" and "server.properties" files from "kafka/config" folder to "kafka/bin/windows" folder.

Step-5 : Start Zookeeper server from "kafka/bin/windows" root folder

    Command : zookeeper-server-start.bat zookeeper.properties

Step-6: Start Kafka Server using below command from "kafka/bin/windows" folder

    Command : kafka-server-start.bat server.properties

Note: If kafka server is stopped, delete kafka logs from temp folder and try again to start kafka server

Step-7 : Create Kakfa Topic from "kafka/bin/windows" root folder

Command : kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic order_topic_1

Step-8 : View created Topics using below command

   Command : kafka-topics.bat --list --bootstrap-server localhost:9092


Kafka Bootstrap Server URL : http://localhost:9092/ or http://192.30.43.2:9092/ for linux server created in cloud








