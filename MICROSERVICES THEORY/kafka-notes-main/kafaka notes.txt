(1) What is Apache Kafka ?
________________________________

-> Apache Kafka is a tool.
-> It acts as mediator between services to exchange messages (Message Broker) where Publisher will publish the message and subscriber will consume the message.
-> Kafka is very useful for real time data exchange.

Example of Kafka:

Scenario: 10 Customers Place Orders at Udupi Hotel

Step 1: Customers Place Orders
‚úÖ Customer App (Producer) ‚Üí Publishes each order to Kafka (order_topic).
‚úÖ Udupi Hotel (Consumer) ‚Üí Subscribes to order_topic and consumes the orders in real-time.
üîÑ Kafka Flow:
10 Customers ---> [Kafka: order_topic] ---> Udupi Hotel App

Step 2: Udupi Hotel Accepts the Orders
‚úÖ Udupi Hotel (Producer) ‚Üí Publishes an "Order Accepted" event to order_status_topic.
‚úÖ Customer App (Consumer) ‚Üí Subscribes to order_status_topic and receives notifications.
üîÑ Kafka Flow:
Udupi Hotel ---> [Kafka: order_status_topic] ---> 10 Customers

üîπ Summary of the Pub/Sub Model
Step	                     Producer   	Kafka Topic	        Consumer	       Purpose
Customer places order	     Customer App	order_topic	        Udupi Hotel App       Order received at restaurant
Udupi Hotel accepts order    Udupi Hotel App	order_status_topic      Customer App	      Order confirmation notification
üîπ When to Store in Database?
‚úîÔ∏è YES ‚Äì When the customer places an order ‚Üí Store in DB (orders table).
‚úîÔ∏è YES ‚Äì When the order is completed ‚Üí Update order status in DB.
‚ùå NO ‚Äì For real-time updates (use Kafka instead).



(2) BENIFIT OF USING KAFKA :
___________________________________________
-> SCALABILIY: Handle large amount of data.
-> FAULT TOLERANCE : Replication of data.
-> HIGH THROUGHPUT : capable of processing millions of message per second.
-> DURABILITY : reliable storage of messages.


(3) Kafka Architecture / Key Component of Kafka:
____________________________________________________
1. Zookeeper/Kraft  - This provides environment to run kafka server
                     -> zookeeper ensures high availability by electing partition leaders.
                     -> Monitor broker health and reassign leadership on failures.
                     -> stores cluster metadata, including topics, partitions and replicas.
                     -> cordinates consumer groups for message ordering.

    What is KRaft ?
     --------------
     -> kraft(kafka raft) is a kafka's new way of handling coordintation and metadata without needing zookepeer.
     -> it uses a built-in Raft concensus/(Raft-agreement-system) protocol so that kafka brokers manange everything themselves.

2. Kafka Server / Kafka Brokers  - When you run kafka, you start one or more "broker" processes:
                                        -> to store messages.
                                        -> handle Read/Write requests.
3. Kafka Topic - It is Logical channel or catogery,where messages are published :
                 -> when you send a message to kafka , you choose which topic to send it to.
                 -> consumers then subscribe to that topic to recieve the messages.
                 eg. kafka topic just like mysql database name and further create tables similar here. 
Diagram :

+-----------------------+
|      Kafka Broker     |
|                       |
|   +-------------+     |
|   |   TopicA    |     |
|   +-------------+     |
|                       |
|   +-------------+     |
|   |   TopicB    |     |
|   +-------------+     |
+-----------------------+


4. Partitions - A partitions is a sub-section of a Kafka topic,each partition maintains a sequential order of messages, allowing prallel read and write for higher performance.

Diagram :

+-----------------------+
|      Kafka Broker     |
|                       |
|   +-------------+     |
|   |   TopicA    |     |
|   |-------------|     |
|   | Partition 0 |     |
|   | Partition 1 |     |
|   +-------------+     |
|                       |
|   +-------------+     |
|   |   TopicB    |     |
|   |-------------|     |
|   | Partition 0 |     |
|   | Partition 1 |     |
|   +-------------+     |
+-----------------------+

6. Publisher/producer - an application or process that sends events to kafka topic, producers write data to kafka.
7. Subscriber/consumer - an application or process that reads events from kafka topic, consumer subscribe to topics and process the data.

Diagram :

                        +-----------------------+     
                        |      Kafka Broker     |
                        |                       |
                        |   +-------------+     |
                        |   |   TopicA    |     |
                        |   |-------------|     |
             Producer ‚Üí |   | Partition 0 |     |  ‚Üê  Consumer
                        |   | Partition 1 |     |
                        |   +-------------+     |
                        |                       |
                        |   +-------------+     |
                        |   |   TopicB    |     |
                        |   |-------------|     |
                        |   | Partition 0 |     |
                        |   | Partition 1 |     |
                        |   +-------------+     |
                        +-----------------------+


(4) what is kafka offSet ?
_____________________________
-> kafka offSet is a sequential number assigned to each message within partition.
   eg. think of it like book page number
-> offSet are unique per partition
-> it help in tracking
-> it is assign by kafka broker not the producer.
-> maintain order(per partition) : messages are always read in order within a partition.
-> track consumer progress : consumer store their last read offset to resume processing. (jha stop hua whi se chalu)

Diagram :

              Topic: orders
              Partition: 0

+---------+---------+---------+---------+---------+---------+
| Offset: |    0    |    1    |    2    |    3    |    4    |
+---------+---------+---------+---------+---------+---------+
| Message | "A"     | "B"     | "C"     | "D"     | "E"     |
+---------+---------+---------+---------+---------+---------+
                                        ‚Üë
                                  Consumer is here
                              (Current offset = 3)


(5) What is message key ?
______________________________
-> used for partitioning : kafka uses the message key to decide which partition the message should go to.
-> ensure ordering :  message with the same key always go to the same partition.
-> optional : producer can send message with or without a key (if no key, kafka distributes messages in round-robin).
-> stored with message : the key is stored along with the message in kafka but doesn't effect the message content.
-> can be any data type: typically a string, but can be any serializable data.

Diagram :

                                  +----------------------------+
                                  |           TopicA           |
                                  |                            |
                      |-- KeyA -->|  +----------------------+  |
                      |           |  |    Partition 0       |  |
+-------------+       |           |  +----------------------+  |
|   Producer  | ------‚Üí           |                            |
+-------------+       |           |  +----------------------+  |
                      |-- KeyB -->|  |    Partition 1       |  |
                                  |  +----------------------+  |
                                  +----------------------------+



(6) What is kafka serialization ?
______________________________________
-> serialization in kafka is the process of converting data into bytes before sending it to kafka (producer side).

(7) What is kafka Deserialization ?
__________________________________________
-> it is also a process in kafka , in which deserializing it back when reading data from kafka ( consumer side ).


(8) What is a consumer group in kafka ?
_______________________________________________
-> a consumer group in kafka is a logical group of consumers that work together to consume messages from a kafka topic in parallel.


(9) What is Kafka Cluster ?
-> A Kafka cluster is a group of Kafka brokers working together to manage message storage, distribution, and replication for high-throughput, fault-tolerant messaging.

Diagram :

          +===================================================================+
          |                         Kafka Cluster                             |
          |                                                                   |
          |   +------------------------+     +-----------------------------+  |
          |   |       Broker 1         |     |          Broker 2           |  |
          |   |------------------------|     |-----------------------------|  |
          |   |  TopicA                |     |  TopicA                     |  |
          |   |  +---------------+     |     |  +---------------+          |  |
Producer ‚Üí|   |  | Partition 0   |     |     |  | Partition 0   |          |  |‚Üê Consumer
          |   |  +---------------+     |     |  +---------------+          |  |
          |   |  | Partition 1   |     |     |  | Partition 1   |          |  |
          |   |  +---------------+     |     |  +---------------+          |  |
          |   |                        |     |                             |  |
          |   |  TopicB                |     |  TopicB                     |  |
          |   |  +---------------+     |     |  +---------------+          |  |
          |   |  | Partition 0   |     |     |  | Partition 0   |          |  |
          |   |  +---------------+     |     |  +---------------+          |  |
          |   +------------------------+     +-----------------------------+  |
          |                                                                   |
          +===================================================================+

eg-1 :
‚úÖ Kafka Cluster with 1 Broker, 1 Topic (3 Partitions), Replication Factor 1 (so no replicas ‚Äî each partition exists only once).
          +====================================================+
          |                  Kafka Cluster                     |
          |                                                    |
          |   +--------------------------------------------+   |
          |   |                Broker 1                    |   |
          |   |--------------------------------------------|   |
          |   |  TopicA                                    |   |
          |   |  +------------------+                      |   |
          |   |  | Partition 0      |  (Leader)            |   |
          |   |  +------------------+                      |   |
          |   |  | Partition 1      |  (Leader)            |   |
          |   |  +------------------+                      |   |
          |   |  | Partition 2      |  (Leader)            |   |
          |   |  +------------------+                      |   |
          |   +--------------------------------------------+   |
          |                                                    |
          +====================================================+

eg-2 :
‚úÖ Kafka Cluster with 2 Broker, 1 Topic (2 Partitions), Replication Factor 2.

            +===================================================================+
            |                           Kafka Cluster                           |
            |                                                                   |
            |   +------------------------+     +------------------------+       |
            |   |        Broker‚ÄØ1        |     |        Broker‚ÄØ2        |       |
            |   |------------------------|     |------------------------|       |
            |   |  TopicA                |     |  TopicA                |       |
            |   |  +------------------+  |     |  +------------------+  |       |
            |   |  | Partition‚ÄØ0      |  |     |  | Partition‚ÄØ0      |  |       |
            |   |  |  (Leader)        |  |     |  |  (Replica)       |  |       |
            |   |  +------------------+  |     |  +------------------+  |       |
            |   |  | Partition‚ÄØ1      |  |     |  | Partition‚ÄØ1      |  |       |
            |   |  |  (Replica)       |  |     |  |  (Leader)        |  |       |
            |   |  +------------------+  |     |  +------------------+  |       |
            |   +------------------------+     +------------------------+       |
            |                                                                   |
            +===================================================================+





(10) Steps to setup kafka in windows:


Step-1 : Download Zookeeper:

   URL : https://dlcdn.apache.org/zookeeper/zookeeper-3.9.2/apache-zookeeper-3.9.2-bin.tar.gz
   URL : https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz

Step-2 : Download Apache Kafka:

	URL : https://downloads.apache.org/kafka/3.8.0/kafka_2.12-3.8.0.tgz

Step-3 : Set Path of ZOOKEEPER in Environment variables upto bin folder.

Step 4: Copy "zookeeper.properties" and "server.properties" files from "kafka/config" folder to "kafka/bin/windows" folder.

Step-5 : Start Zookeeper server from "kafka/bin/windows" root folder

    Command : zookeeper-server-start.bat zookeeper.properties

Step-6: Start Kafka Server using below command from "kafka/bin/windows" folder

    Command : kafka-server-start.bat server.properties

Note: If kafka server is stopped, delete kafka logs from temp folder and try again to start kafka server

Step-7 : Create Kakfa Topic from "kafka/bin/windows" root folder

Command : kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic order_topic_1

Step-8 : View created Topics using below command

   Command : kafka-topics.bat --list --bootstrap-server localhost:9092


Kafka Bootstrap Server URL : http://localhost:9092/ or http://192.30.43.2:9092/ for linux server created in cloud


(11) What is Kafka UI ?
web-based open source tool that provides an easy way to use interface for monitoring,managing and interacting with apache clusters,
including topics, partitions,consumer groups and messages.





