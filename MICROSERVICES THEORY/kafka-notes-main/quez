(1) Basics  :
-----------------
      Q1. What is Apache Kafka?
      Q2. Why do we use Kafka?
      Q3. Advantages and Disadvantage of kafka ?
      Q4. Explain Kafka Architecture OR Key Component of Kafka ?
      Q5. What is Zookeeper in Kafka?
      Q6. What is KRaft in Kafka?
      Q7. What is a Kafka Server OR  Kafka Brokers  ?
      Q8. What is Kafka Topic ?
      Q9. What is Partitions ?
      Q10. What is Publisher/producer ?
      Q11. What is Subscriber/consumer ?
      Q12. What is a Consumer Group?
      Q13. What is a Kafka Cluster?
(2) Installation & Setup :
---------------------------
      Q1. How do you install Kafka locally?
      Q2. What are Kafka prerequisites?
      Q3. What is the default Kafka port?
      Q4. How do you secure Kafka?
      Q5. How do you start and stop Kafka?
      Q6. How do you set up Kafka on Docker?
(3) Kafka Producers & Consumers :
----------------------------------
      Q1. How do you create a Kafka Producer in Spring Boot?
      Q2. How do you create a Kafka Consumer in Spring Boot?
      Q3. What is a Kafka key / message key , and why is it used?
      Q4. What is Kafka Producer Acknowledgment (acks) and  the difference between acks=0,1,all in Kafka Producer?
      Q5. What is an Offset in Kafka?
      Q6. What is the between assigning and committing offsets in Kafka?
      Q7. How do you commit offsets in Kafka?
      Q8. What is the difference between Kafka’s at-most-once, at-least-once, and exactly-once delivery?
(4) Kafka & Spring Boot Integration :
--------------------------------------
      Q1. How to configure Kafka in Spring Boot?
      Q2. How do you create multiple consumers for the same topic?
      Q3. How to send messages asynchronously in Spring Boot Kafka?
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q1.
      Q15. What is Kafka Replication?
      Q18. What is Kafka Serialization?
      Q19. What is Kafka Deserialization?
      Q20. Real-time use cases of Kafka?
      Q21. What happens if a consumer goes down?
      Q22. What happens if a broker goes down?
      Q23. What is Kafka Retention Policy?
      Q24. What is Kafka Connect?
      Q25. How do you monitor Kafka?
      Q27. What is Kafka UI ?
      a.
     
      (4) Kafka & Spring Boot Integration

Q1. How to configure Kafka in Spring Boot?
A: Add spring-kafka dependency, configure bootstrap servers, topics, producer & consumer factories.

Q2. How do you create multiple consumers for the same topic?
A: Use @KafkaListener with different groupIds or same group for partition-based load balancing.

Q3. How to send messages asynchronously in Spring Boot Kafka?
A: Use kafkaTemplate.send(topic, message).addCallback(successCallback, failureCallback).

Q4. How do you handle deserialization errors?
A: Use ErrorHandlingDeserializer or @KafkaListener(errorHandler = "handler").

Q5. How do you configure concurrency in Kafka consumers?
A: Set concurrency property in ConcurrentKafkaListenerContainerFactory.

Q6. How can Spring Boot handle Kafka transactions?
A: Enable transactional.id in ProducerFactory and use @Transactional on methods sending messages.

Q7. How do you integrate Kafka with Spring Boot Actuator?
A: Use Actuator endpoints to monitor consumer lag, producer metrics, and broker health.

(5) Security & Administration

Q1. How do you secure Kafka in Spring Boot?
A: Configure SASL/SSL in application.properties or application.yml, use secure producer & consumer factories.

Q2. What is Kafka ACL?
A: Access Control List to grant/restrict operations like Read, Write, Create per topic/user.

Q3. How do you monitor Kafka performance?
A: Use JMX metrics, Kafka Manager, or Spring Boot Actuator metrics.

Q4. How do you backup Kafka data?
A: Use MirrorMaker, Kafka Connect, or topic-level replication to backup clusters.

(6) Troubleshooting & Performance

Q1. What happens if a Kafka broker goes down?
A: Partitions with replicas on other brokers remain available; leader election occurs automatically.

Q2. How do you handle consumer lag?
A: Increase consumers in the group, check partitions, tune processing speed.

Q3. What is the common reason for producer failure?
A: Broker unavailable, network issues, serialization errors, wrong topic.

Q4. How do you debug Kafka messages in Spring Boot?
A: Enable logging, use kafka-console-consumer.sh, check listener exceptions.

Q5. How do you handle message retries?
A: Configure retry.backoff.ms and max.poll.records in consumer properties.

(7) Advanced Concepts (for 1–3 years)

Q1. What is Kafka Streams?
A: A library for real-time stream processing of Kafka topics in a fault-tolerant way.

Q2. What is Kafka Connect?
A: A tool to integrate Kafka with external systems (DB, filesystem) for source and sink connectors.

Q3. What is log compaction in Kafka?
A: Retains the latest value for each key, useful for changelog topics.

Q4. How do you implement exactly-once semantics in Kafka with Spring Boot?
A: Enable producer transactions, idempotence, and configure consumer transactional read.

Q5. How to use Kafka with Spring Cloud Stream?
A: Define bindings for input/output channels and annotate with @EnableBinding.
