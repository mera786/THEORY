
############################
Spring Boot Annotations
#############################
1. What is @RequestMapping?

-> It’s a Spring MVC annotation used to map HTTP requests to handler methods or classes in your controller.
-> It tells Spring which URL (path) a particular method or class should handle.


2. What is @RequestParam?

-> It’s an annotation used in controller method parameters.
-> It binds HTTP request parameters (query parameters or form data) to method arguments.
-> It extracts values from the URL or form and passes them into your controller method.

3. What is @Service?

->  @Service is a Spring stereotype annotation.
-> It marks a class as a Service component in the Service Layer of your application.
-> Spring will detect it during component scanning and create an instance (bean) of that class in the Spring IOC container
-> It makes your class eligible for dependency injection.


4. What is @Component?

-> @Component is a generic Spring annotation to mark a class as a Spring-managed bean.
-> When you annotate a class with @Component, Spring will detect it during component scanning and create an instance (bean) of that class in the Spring IOC container.
-> It makes your class eligible for dependency injection.

5. @Value: 
-> Injects property values into beans.

6.WHAT DOES THE @SPRINGBOOTAPPLICATION ANNOTATION DO INTERNALLY?
-> IT IS THE COMBINATION OF THREE ANNOTATIONS @CONFIGURATION, @ENABLEAUTOCONFIGURATION AND @COMPONENTSCAN SPRING BOOT ENABLES THE DEVELOPER
   TO USE A SINGLE ANNOTATION INSTEAD OF USING MULTIPLE.

7. WHAT IS DIFFERENCE BETWEEN @CONTROLLER AND @RESTCONTROLLER?
-> @CONTROLLER MAP THE MODEL OBJECT TO VIEW OR TEMPLATE AND MAKE IT HUMAN READABLE BUT @RESTCONTROLLER SIMPLY RETURNS THE OBJECT AND THAT OBJECT 
  DATA IS DIRECTLY WRITTEN INTO HTTP RESPONSE AS JSON OR XML.


8. WHAT ARE THE MAJOR DIFFERENCE BETWEEN @REQUESTMAPPING AND @GETMAPPING?
-> @REQUESTMAPPING CAN BE USED WITH GET, POST, PUT AND MANY OTHER REQUEST METHOD WHILE @GETMAPPING IS ONLY AN EXTENSION OF @REQUESTMAPPING 
   WHICH HELP US TO IMPROVE CLARITY ON REQUEST.




-----------X-------------------------------------------- END -----------------x-------------------------------------x-------------------------------

@Configuration : Indicates that a class declares one or more @Bean methods.
@ComponentScan : Configures component scanning directives for use with @Configuration classes.
@EnableAutoConfiguration:
 
@Bean:  Indicates that a method produces a bean to be managed by the Spring container.
@Autowired: Marks a constructor, field, setter method, or config method as to be autowired by Spring's dependency injection facilities.

@Qualifier: Indicates a specific bean should be used for injection.
@Primary: Indicates a bean should be given preference when multiple candidates are qualified to autowire a single-valued dependency.
@Scope: Configures the scope of a bean.



@PostMapping: Handles HTTP POST requests.
@RequestBody: Binds the HTTP request body to a transfer or domain object.
@PathVariable: Extracts values from the URI.

@GetMapping: Handles HTTP GET requests.
@PutMapping: Handles HTTP PUT requests.
@DeleteMapping: Handles HTTP DELETE requests.



@Repository: Indicates a repository component.
@PostConstruct: Specifies a method to be invoked after dependency injection.



@Lazy: Marks a bean to be initialized lazily.
@Convert(converter = EncryptDecryptConverter.class) :- This annotation indicates that the class is a JPA converter

@PropertySource: Adds a property source to Spring's Environment.


@ControllerAdvice: Allows you to handle exceptions across the whole application.
@Conditional: Indicates that a component is eligible for registration based on a condition.
@Profile: Configures beans to be registered only under specific profiles.
@ControllerAdvice: Specialization of @ControllerAdvice for REST controllers.
@RequestHeader: Binds a method parameter to a request header.
@ModelAttribute: Binds a method parameter or method return value to a named model attribute.
@ExceptionHandler: Handles exceptions thrown by request handler methods.



